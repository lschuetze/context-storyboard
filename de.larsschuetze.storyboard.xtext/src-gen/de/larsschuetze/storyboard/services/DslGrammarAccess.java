/*
 * generated by Xtext 2.9.1
 */
package de.larsschuetze.storyboard.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class DslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class StoryboardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.larsschuetze.storyboard.Dsl.Storyboard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cImportedEventsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportedEventsEventParserRuleCall_2_0 = (RuleCall)cImportedEventsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cStoryboardKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameQualifiedNameParserRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Assignment cElementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElementsAbstractElementParserRuleCall_6_0 = (RuleCall)cElementsAssignment_6.eContents().get(0);
		
		//Storyboard:
		//	'events' '{'
		//	importedEvents+=Event+
		//	'}'
		//	'storyboard' name=QualifiedName
		//	elements+=AbstractElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//'events' '{' importedEvents+=Event+ '}' 'storyboard' name=QualifiedName elements+=AbstractElement*
		public Group getGroup() { return cGroup; }
		
		//'events'
		public Keyword getEventsKeyword_0() { return cEventsKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//importedEvents+=Event+
		public Assignment getImportedEventsAssignment_2() { return cImportedEventsAssignment_2; }
		
		//Event
		public RuleCall getImportedEventsEventParserRuleCall_2_0() { return cImportedEventsEventParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
		
		//'storyboard'
		public Keyword getStoryboardKeyword_4() { return cStoryboardKeyword_4; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_5_0() { return cNameQualifiedNameParserRuleCall_5_0; }
		
		//elements+=AbstractElement*
		public Assignment getElementsAssignment_6() { return cElementsAssignment_6; }
		
		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_6_0() { return cElementsAbstractElementParserRuleCall_6_0; }
	}
	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.larsschuetze.storyboard.Dsl.AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTransitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractElement:
		//	Node | Transition;
		@Override public ParserRule getRule() { return rule; }
		
		//Node | Transition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Node
		public RuleCall getNodeParserRuleCall_0() { return cNodeParserRuleCall_0; }
		
		//Transition
		public RuleCall getTransitionParserRuleCall_1() { return cTransitionParserRuleCall_1; }
	}
	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.larsschuetze.storyboard.Dsl.Node");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cControlNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStoryPatternNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Node:
		//	ControlNode | StoryPatternNode;
		@Override public ParserRule getRule() { return rule; }
		
		//ControlNode | StoryPatternNode
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ControlNode
		public RuleCall getControlNodeParserRuleCall_0() { return cControlNodeParserRuleCall_0; }
		
		//StoryPatternNode
		public RuleCall getStoryPatternNodeParserRuleCall_1() { return cStoryPatternNodeParserRuleCall_1; }
	}
	public class ControlNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.larsschuetze.storyboard.Dsl.ControlNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStartNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEndNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ControlNode:
		//	StartNode | EndNode;
		@Override public ParserRule getRule() { return rule; }
		
		//StartNode | EndNode
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StartNode
		public RuleCall getStartNodeParserRuleCall_0() { return cStartNodeParserRuleCall_0; }
		
		//EndNode
		public RuleCall getEndNodeParserRuleCall_1() { return cEndNodeParserRuleCall_1; }
	}
	public class StartNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.larsschuetze.storyboard.Dsl.StartNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//StartNode:
		//	'start' name=ValidID;
		@Override public ParserRule getRule() { return rule; }
		
		//'start' name=ValidID
		public Group getGroup() { return cGroup; }
		
		//'start'
		public Keyword getStartKeyword_0() { return cStartKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
	}
	public class EndNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.larsschuetze.storyboard.Dsl.EndNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//EndNode:
		//	'end' name=ValidID;
		@Override public ParserRule getRule() { return rule; }
		
		//'end' name=ValidID
		public Group getGroup() { return cGroup; }
		
		//'end'
		public Keyword getEndKeyword_0() { return cEndKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.larsschuetze.storyboard.Dsl.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cEventTypeAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//Event:
		//	'import' eventType=JvmTypeReference 'as' name=ValidID;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' eventType=JvmTypeReference 'as' name=ValidID
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//eventType=JvmTypeReference
		public Assignment getEventTypeAssignment_1() { return cEventTypeAssignment_1; }
		
		//JvmTypeReference
		public RuleCall getEventTypeJvmTypeReferenceParserRuleCall_1_0() { return cEventTypeJvmTypeReferenceParserRuleCall_1_0; }
		
		//'as'
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }
		
		//name=ValidID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_3_0() { return cNameValidIDParserRuleCall_3_0; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.larsschuetze.storyboard.Dsl.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEventAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cEventEventCrossReference_4_0 = (CrossReference)cEventAssignment_4.eContents().get(0);
		private final RuleCall cEventEventIDTerminalRuleCall_4_0_1 = (RuleCall)cEventEventCrossReference_4_0.eContents().get(1);
		private final Assignment cGuardAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cGuardGuardParserRuleCall_5_0 = (RuleCall)cGuardAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSourceAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cSourceNodeCrossReference_7_0 = (CrossReference)cSourceAssignment_7.eContents().get(0);
		private final RuleCall cSourceNodeIDTerminalRuleCall_7_0_1 = (RuleCall)cSourceNodeCrossReference_7_0.eContents().get(1);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cFullStopKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cSourcePortAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cSourcePortStoryPatternPortParserRuleCall_8_1_0 = (RuleCall)cSourcePortAssignment_8_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cTargetAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final CrossReference cTargetNodeCrossReference_10_0 = (CrossReference)cTargetAssignment_10.eContents().get(0);
		private final RuleCall cTargetNodeIDTerminalRuleCall_10_0_1 = (RuleCall)cTargetNodeCrossReference_10_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Transition:
		//	'transition' name=ValidID '{'
		//	'{' event=[Event] guard=Guard? '}'
		//	source=[Node] ('.' sourcePort=StoryPatternPort)? '->' target=[Node]
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'transition' name=ValidID '{' '{' event=[Event] guard=Guard? '}' source=[Node] ('.' sourcePort=StoryPatternPort)? '->'
		//target=[Node] '}'
		public Group getGroup() { return cGroup; }
		
		//'transition'
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//event=[Event]
		public Assignment getEventAssignment_4() { return cEventAssignment_4; }
		
		//[Event]
		public CrossReference getEventEventCrossReference_4_0() { return cEventEventCrossReference_4_0; }
		
		//ID
		public RuleCall getEventEventIDTerminalRuleCall_4_0_1() { return cEventEventIDTerminalRuleCall_4_0_1; }
		
		//guard=Guard?
		public Assignment getGuardAssignment_5() { return cGuardAssignment_5; }
		
		//Guard
		public RuleCall getGuardGuardParserRuleCall_5_0() { return cGuardGuardParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//source=[Node]
		public Assignment getSourceAssignment_7() { return cSourceAssignment_7; }
		
		//[Node]
		public CrossReference getSourceNodeCrossReference_7_0() { return cSourceNodeCrossReference_7_0; }
		
		//ID
		public RuleCall getSourceNodeIDTerminalRuleCall_7_0_1() { return cSourceNodeIDTerminalRuleCall_7_0_1; }
		
		//('.' sourcePort=StoryPatternPort)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'.'
		public Keyword getFullStopKeyword_8_0() { return cFullStopKeyword_8_0; }
		
		//sourcePort=StoryPatternPort
		public Assignment getSourcePortAssignment_8_1() { return cSourcePortAssignment_8_1; }
		
		//StoryPatternPort
		public RuleCall getSourcePortStoryPatternPortParserRuleCall_8_1_0() { return cSourcePortStoryPatternPortParserRuleCall_8_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_9() { return cHyphenMinusGreaterThanSignKeyword_9; }
		
		//target=[Node]
		public Assignment getTargetAssignment_10() { return cTargetAssignment_10; }
		
		//[Node]
		public CrossReference getTargetNodeCrossReference_10_0() { return cTargetNodeCrossReference_10_0; }
		
		//ID
		public RuleCall getTargetNodeIDTerminalRuleCall_10_0_1() { return cTargetNodeIDTerminalRuleCall_10_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class GuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.larsschuetze.storyboard.Dsl.Guard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGuardAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGuardGuardValueParserRuleCall_1_0 = (RuleCall)cGuardAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Guard:
		//	'[' guard=GuardValue ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' guard=GuardValue ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//guard=GuardValue
		public Assignment getGuardAssignment_1() { return cGuardAssignment_1; }
		
		//GuardValue
		public RuleCall getGuardGuardValueParserRuleCall_1_0() { return cGuardGuardValueParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class GuardValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.larsschuetze.storyboard.Dsl.GuardValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cFullStopKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final RuleCall cOpCompareParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cOpEqualityParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//GuardValue:
		//	(ID | STRING | INT | '(' | ')' | '.' | OpCompare | OpEquality)+;
		@Override public ParserRule getRule() { return rule; }
		
		//(ID | STRING | INT | '(' | ')' | '.' | OpCompare | OpEquality)+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'.'
		public Keyword getFullStopKeyword_5() { return cFullStopKeyword_5; }
		
		//OpCompare
		public RuleCall getOpCompareParserRuleCall_6() { return cOpCompareParserRuleCall_6; }
		
		//OpEquality
		public RuleCall getOpEqualityParserRuleCall_7() { return cOpEqualityParserRuleCall_7; }
	}
	public class StoryPatternPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.larsschuetze.storyboard.Dsl.StoryPatternPort");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSuccessPortParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFailurePortParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StoryPatternPort:
		//	SuccessPort | FailurePort;
		@Override public ParserRule getRule() { return rule; }
		
		//SuccessPort | FailurePort
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SuccessPort
		public RuleCall getSuccessPortParserRuleCall_0() { return cSuccessPortParserRuleCall_0; }
		
		//FailurePort
		public RuleCall getFailurePortParserRuleCall_1() { return cFailurePortParserRuleCall_1; }
	}
	public class FailurePortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.larsschuetze.storyboard.Dsl.FailurePort");
		private final Keyword cFailureKeyword = (Keyword)rule.eContents().get(1);
		
		//FailurePort:
		//	'failure';
		@Override public ParserRule getRule() { return rule; }
		
		//'failure'
		public Keyword getFailureKeyword() { return cFailureKeyword; }
	}
	public class SuccessPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.larsschuetze.storyboard.Dsl.SuccessPort");
		private final Keyword cSuccessKeyword = (Keyword)rule.eContents().get(1);
		
		//SuccessPort:
		//	'success';
		@Override public ParserRule getRule() { return rule; }
		
		//'success'
		public Keyword getSuccessKeyword() { return cSuccessKeyword; }
	}
	public class StoryPatternNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.larsschuetze.storyboard.Dsl.StoryPatternNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStorypatternKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cClassKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cClassNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cClassNameQualifiedNameParserRuleCall_4_0 = (RuleCall)cClassNameAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRoleReconfigurationsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRoleReconfigurationsRoleNodeParserRuleCall_6_0 = (RuleCall)cRoleReconfigurationsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//StoryPatternNode:
		//	'storypattern' name=QualifiedName
		//	'{'
		//	'class' className=QualifiedName '{'
		//	roleReconfigurations+=RoleNode+
		//	'}'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'storypattern' name=QualifiedName '{' 'class' className=QualifiedName '{' roleReconfigurations+=RoleNode+ '}' '}'
		public Group getGroup() { return cGroup; }
		
		//'storypattern'
		public Keyword getStorypatternKeyword_0() { return cStorypatternKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'class'
		public Keyword getClassKeyword_3() { return cClassKeyword_3; }
		
		//className=QualifiedName
		public Assignment getClassNameAssignment_4() { return cClassNameAssignment_4; }
		
		//QualifiedName
		public RuleCall getClassNameQualifiedNameParserRuleCall_4_0() { return cClassNameQualifiedNameParserRuleCall_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//roleReconfigurations+=RoleNode+
		public Assignment getRoleReconfigurationsAssignment_6() { return cRoleReconfigurationsAssignment_6; }
		
		//RoleNode
		public RuleCall getRoleReconfigurationsRoleNodeParserRuleCall_6_0() { return cRoleReconfigurationsRoleNodeParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class RoleNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.larsschuetze.storyboard.Dsl.RoleNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cConditionRoleNodeParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cRewriteRoleNodeParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCompartmentNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCompartmentNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cCompartmentNameAssignment_2.eContents().get(0);
		
		//RoleNode:
		//	(ConditionRoleNode | RewriteRoleNode) 'in' compartmentName=QualifiedName;
		@Override public ParserRule getRule() { return rule; }
		
		//(ConditionRoleNode | RewriteRoleNode) 'in' compartmentName=QualifiedName
		public Group getGroup() { return cGroup; }
		
		//ConditionRoleNode | RewriteRoleNode
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ConditionRoleNode
		public RuleCall getConditionRoleNodeParserRuleCall_0_0() { return cConditionRoleNodeParserRuleCall_0_0; }
		
		//RewriteRoleNode
		public RuleCall getRewriteRoleNodeParserRuleCall_0_1() { return cRewriteRoleNodeParserRuleCall_0_1; }
		
		//'in'
		public Keyword getInKeyword_1() { return cInKeyword_1; }
		
		//compartmentName=QualifiedName
		public Assignment getCompartmentNameAssignment_2() { return cCompartmentNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getCompartmentNameQualifiedNameParserRuleCall_2_0() { return cCompartmentNameQualifiedNameParserRuleCall_2_0; }
	}
	public class RewriteRoleNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.larsschuetze.storyboard.Dsl.RewriteRoleNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAddRoleNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRenewRoleNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRemoveRoleNodeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//RewriteRoleNode:
		//	AddRoleNode | RenewRoleNode | RemoveRoleNode;
		@Override public ParserRule getRule() { return rule; }
		
		//AddRoleNode | RenewRoleNode | RemoveRoleNode
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AddRoleNode
		public RuleCall getAddRoleNodeParserRuleCall_0() { return cAddRoleNodeParserRuleCall_0; }
		
		//RenewRoleNode
		public RuleCall getRenewRoleNodeParserRuleCall_1() { return cRenewRoleNodeParserRuleCall_1; }
		
		//RemoveRoleNode
		public RuleCall getRemoveRoleNodeParserRuleCall_2() { return cRemoveRoleNodeParserRuleCall_2; }
	}
	public class RemoveRoleNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.larsschuetze.storyboard.Dsl.RemoveRoleNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//RemoveRoleNode:
		//	'remove' name=QualifiedName;
		@Override public ParserRule getRule() { return rule; }
		
		//'remove' name=QualifiedName
		public Group getGroup() { return cGroup; }
		
		//'remove'
		public Keyword getRemoveKeyword_0() { return cRemoveKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
	}
	public class RenewRoleNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.larsschuetze.storyboard.Dsl.RenewRoleNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRenewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//RenewRoleNode:
		//	'renew' name=QualifiedName;
		@Override public ParserRule getRule() { return rule; }
		
		//'renew' name=QualifiedName
		public Group getGroup() { return cGroup; }
		
		//'renew'
		public Keyword getRenewKeyword_0() { return cRenewKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
	}
	public class AddRoleNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.larsschuetze.storyboard.Dsl.AddRoleNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//AddRoleNode:
		//	'add' name=QualifiedName;
		@Override public ParserRule getRule() { return rule; }
		
		//'add' name=QualifiedName
		public Group getGroup() { return cGroup; }
		
		//'add'
		public Keyword getAddKeyword_0() { return cAddKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
	}
	public class ConditionRoleNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.larsschuetze.storyboard.Dsl.ConditionRoleNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPlayRoleNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProhibitedRoleNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConditionRoleNode:
		//	PlayRoleNode | ProhibitedRoleNode;
		@Override public ParserRule getRule() { return rule; }
		
		//PlayRoleNode | ProhibitedRoleNode
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PlayRoleNode
		public RuleCall getPlayRoleNodeParserRuleCall_0() { return cPlayRoleNodeParserRuleCall_0; }
		
		//ProhibitedRoleNode
		public RuleCall getProhibitedRoleNodeParserRuleCall_1() { return cProhibitedRoleNodeParserRuleCall_1; }
	}
	public class ProhibitedRoleNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.larsschuetze.storyboard.Dsl.ProhibitedRoleNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProhibitsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ProhibitedRoleNode:
		//	'prohibits' name=QualifiedName;
		@Override public ParserRule getRule() { return rule; }
		
		//'prohibits' name=QualifiedName
		public Group getGroup() { return cGroup; }
		
		//'prohibits'
		public Keyword getProhibitsKeyword_0() { return cProhibitsKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
	}
	public class PlayRoleNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.larsschuetze.storyboard.Dsl.PlayRoleNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlaysKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//PlayRoleNode:
		//	'plays' name=QualifiedName;
		@Override public ParserRule getRule() { return rule; }
		
		//'plays' name=QualifiedName
		public Group getGroup() { return cGroup; }
		
		//'plays'
		public Keyword getPlaysKeyword_0() { return cPlaysKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
	}
	
	
	private final StoryboardElements pStoryboard;
	private final AbstractElementElements pAbstractElement;
	private final NodeElements pNode;
	private final ControlNodeElements pControlNode;
	private final StartNodeElements pStartNode;
	private final EndNodeElements pEndNode;
	private final EventElements pEvent;
	private final TransitionElements pTransition;
	private final GuardElements pGuard;
	private final GuardValueElements pGuardValue;
	private final StoryPatternPortElements pStoryPatternPort;
	private final FailurePortElements pFailurePort;
	private final SuccessPortElements pSuccessPort;
	private final StoryPatternNodeElements pStoryPatternNode;
	private final RoleNodeElements pRoleNode;
	private final RewriteRoleNodeElements pRewriteRoleNode;
	private final RemoveRoleNodeElements pRemoveRoleNode;
	private final RenewRoleNodeElements pRenewRoleNode;
	private final AddRoleNodeElements pAddRoleNode;
	private final ConditionRoleNodeElements pConditionRoleNode;
	private final ProhibitedRoleNodeElements pProhibitedRoleNode;
	private final PlayRoleNodeElements pPlayRoleNode;
	
	private final Grammar grammar;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pStoryboard = new StoryboardElements();
		this.pAbstractElement = new AbstractElementElements();
		this.pNode = new NodeElements();
		this.pControlNode = new ControlNodeElements();
		this.pStartNode = new StartNodeElements();
		this.pEndNode = new EndNodeElements();
		this.pEvent = new EventElements();
		this.pTransition = new TransitionElements();
		this.pGuard = new GuardElements();
		this.pGuardValue = new GuardValueElements();
		this.pStoryPatternPort = new StoryPatternPortElements();
		this.pFailurePort = new FailurePortElements();
		this.pSuccessPort = new SuccessPortElements();
		this.pStoryPatternNode = new StoryPatternNodeElements();
		this.pRoleNode = new RoleNodeElements();
		this.pRewriteRoleNode = new RewriteRoleNodeElements();
		this.pRemoveRoleNode = new RemoveRoleNodeElements();
		this.pRenewRoleNode = new RenewRoleNodeElements();
		this.pAddRoleNode = new AddRoleNodeElements();
		this.pConditionRoleNode = new ConditionRoleNodeElements();
		this.pProhibitedRoleNode = new ProhibitedRoleNodeElements();
		this.pPlayRoleNode = new PlayRoleNodeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.larsschuetze.storyboard.Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//Storyboard:
	//	'events' '{'
	//	importedEvents+=Event+
	//	'}'
	//	'storyboard' name=QualifiedName
	//	elements+=AbstractElement*;
	public StoryboardElements getStoryboardAccess() {
		return pStoryboard;
	}
	
	public ParserRule getStoryboardRule() {
		return getStoryboardAccess().getRule();
	}
	
	//AbstractElement:
	//	Node | Transition;
	public AbstractElementElements getAbstractElementAccess() {
		return pAbstractElement;
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}
	
	//Node:
	//	ControlNode | StoryPatternNode;
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}
	
	//ControlNode:
	//	StartNode | EndNode;
	public ControlNodeElements getControlNodeAccess() {
		return pControlNode;
	}
	
	public ParserRule getControlNodeRule() {
		return getControlNodeAccess().getRule();
	}
	
	//StartNode:
	//	'start' name=ValidID;
	public StartNodeElements getStartNodeAccess() {
		return pStartNode;
	}
	
	public ParserRule getStartNodeRule() {
		return getStartNodeAccess().getRule();
	}
	
	//EndNode:
	//	'end' name=ValidID;
	public EndNodeElements getEndNodeAccess() {
		return pEndNode;
	}
	
	public ParserRule getEndNodeRule() {
		return getEndNodeAccess().getRule();
	}
	
	//Event:
	//	'import' eventType=JvmTypeReference 'as' name=ValidID;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//Transition:
	//	'transition' name=ValidID '{'
	//	'{' event=[Event] guard=Guard? '}'
	//	source=[Node] ('.' sourcePort=StoryPatternPort)? '->' target=[Node]
	//	'}';
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//Guard:
	//	'[' guard=GuardValue ']';
	public GuardElements getGuardAccess() {
		return pGuard;
	}
	
	public ParserRule getGuardRule() {
		return getGuardAccess().getRule();
	}
	
	//GuardValue:
	//	(ID | STRING | INT | '(' | ')' | '.' | OpCompare | OpEquality)+;
	public GuardValueElements getGuardValueAccess() {
		return pGuardValue;
	}
	
	public ParserRule getGuardValueRule() {
		return getGuardValueAccess().getRule();
	}
	
	//StoryPatternPort:
	//	SuccessPort | FailurePort;
	public StoryPatternPortElements getStoryPatternPortAccess() {
		return pStoryPatternPort;
	}
	
	public ParserRule getStoryPatternPortRule() {
		return getStoryPatternPortAccess().getRule();
	}
	
	//FailurePort:
	//	'failure';
	public FailurePortElements getFailurePortAccess() {
		return pFailurePort;
	}
	
	public ParserRule getFailurePortRule() {
		return getFailurePortAccess().getRule();
	}
	
	//SuccessPort:
	//	'success';
	public SuccessPortElements getSuccessPortAccess() {
		return pSuccessPort;
	}
	
	public ParserRule getSuccessPortRule() {
		return getSuccessPortAccess().getRule();
	}
	
	//StoryPatternNode:
	//	'storypattern' name=QualifiedName
	//	'{'
	//	'class' className=QualifiedName '{'
	//	roleReconfigurations+=RoleNode+
	//	'}'
	//	'}';
	public StoryPatternNodeElements getStoryPatternNodeAccess() {
		return pStoryPatternNode;
	}
	
	public ParserRule getStoryPatternNodeRule() {
		return getStoryPatternNodeAccess().getRule();
	}
	
	//RoleNode:
	//	(ConditionRoleNode | RewriteRoleNode) 'in' compartmentName=QualifiedName;
	public RoleNodeElements getRoleNodeAccess() {
		return pRoleNode;
	}
	
	public ParserRule getRoleNodeRule() {
		return getRoleNodeAccess().getRule();
	}
	
	//RewriteRoleNode:
	//	AddRoleNode | RenewRoleNode | RemoveRoleNode;
	public RewriteRoleNodeElements getRewriteRoleNodeAccess() {
		return pRewriteRoleNode;
	}
	
	public ParserRule getRewriteRoleNodeRule() {
		return getRewriteRoleNodeAccess().getRule();
	}
	
	//RemoveRoleNode:
	//	'remove' name=QualifiedName;
	public RemoveRoleNodeElements getRemoveRoleNodeAccess() {
		return pRemoveRoleNode;
	}
	
	public ParserRule getRemoveRoleNodeRule() {
		return getRemoveRoleNodeAccess().getRule();
	}
	
	//RenewRoleNode:
	//	'renew' name=QualifiedName;
	public RenewRoleNodeElements getRenewRoleNodeAccess() {
		return pRenewRoleNode;
	}
	
	public ParserRule getRenewRoleNodeRule() {
		return getRenewRoleNodeAccess().getRule();
	}
	
	//AddRoleNode:
	//	'add' name=QualifiedName;
	public AddRoleNodeElements getAddRoleNodeAccess() {
		return pAddRoleNode;
	}
	
	public ParserRule getAddRoleNodeRule() {
		return getAddRoleNodeAccess().getRule();
	}
	
	//ConditionRoleNode:
	//	PlayRoleNode | ProhibitedRoleNode;
	public ConditionRoleNodeElements getConditionRoleNodeAccess() {
		return pConditionRoleNode;
	}
	
	public ParserRule getConditionRoleNodeRule() {
		return getConditionRoleNodeAccess().getRule();
	}
	
	//ProhibitedRoleNode:
	//	'prohibits' name=QualifiedName;
	public ProhibitedRoleNodeElements getProhibitedRoleNodeAccess() {
		return pProhibitedRoleNode;
	}
	
	public ParserRule getProhibitedRoleNodeRule() {
		return getProhibitedRoleNodeAccess().getRule();
	}
	
	//PlayRoleNode:
	//	'plays' name=QualifiedName;
	public PlayRoleNodeElements getPlayRoleNodeAccess() {
		return pPlayRoleNode;
	}
	
	public ParserRule getPlayRoleNodeRule() {
		return getPlayRoleNodeAccess().getRule();
	}
	
	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' | '<' '<' '=' | '>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//	'->' | '..<' | '>' '..' | '..' | '=>' | '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>' | '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)? ')')? memberCallArguments+=XClosure?)*
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure XExpression:
	//	=> ({XClosure} '[') => ((declaredFormalParameters+=JvmFormalParameter (','
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')? expression=XExpressionInClosure ']'
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')'
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression XExpression:
	//	{XIfExpression} 'if' '(' if=XExpression ')' then=XExpression (=> 'else' else=XExpression)?
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression XExpression:
	//	{XSwitchExpression} 'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')' | =>
	//	(declaredParam=JvmFormalParameter ':')? switch=XExpression) '{' cases+=XCasePart* ('default' ':'
	//	default=XExpression)? '}'
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression} 'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression} 'for' '(' (initExpressions+=XExpressionOrVarDeclaration (','
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ';' expression=XExpression? ';' (updateExpressions+=XExpression (','
	//	updateExpressions+=XExpression)*)? ')' eachExpression=XExpression
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression XExpression:
	//	{XWhileExpression} 'while' '(' predicate=XExpression ')' body=XExpression
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression} 'do' body=XExpression 'while' '(' predicate=XExpression ')'
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression XExpression:
	//	{XBlockExpression} '{' (expressions+=XExpressionOrVarDeclaration ';'?)* '}'
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | XExpression
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('='
	//	right=XExpression)?
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)? ')')? featureCallArguments+=XClosure?
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall XExpression:
	//	{XConstructorCall} 'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')? (=>
	//	explicitConstructorCall?='(' (arguments+=XShortClosure | arguments+=XExpression (',' arguments+=XExpression)*)? ')')?
	//	arguments+=XClosure?
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true')
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null'
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')'
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression} 'try' expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally'
	//	finallyExpression=XExpression)? | 'finally' finallyExpression=XExpression)
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression} 'synchronized' '(') param=XExpression ')' expression=XExpression
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * /
	//StaticQualifier:
	//	(ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? | "'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
