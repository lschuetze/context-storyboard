/**
 */
package metamodel.provider;

import java.util.ArrayList;
import java.util.Collection;

import metamodel.util.MetamodelAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MetamodelItemProviderAdapterFactory extends MetamodelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MetamodelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.Edge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EdgeItemProvider edgeItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.Edge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEdgeAdapter() {
		if (edgeItemProvider == null) {
			edgeItemProvider = new EdgeItemProvider(this);
		}

		return edgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.RoleStoryBoard} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoleStoryBoardItemProvider roleStoryBoardItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.RoleStoryBoard}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoleStoryBoardAdapter() {
		if (roleStoryBoardItemProvider == null) {
			roleStoryBoardItemProvider = new RoleStoryBoardItemProvider(this);
		}

		return roleStoryBoardItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.TransitionConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionConstraintItemProvider transitionConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.TransitionConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransitionConstraintAdapter() {
		if (transitionConstraintItemProvider == null) {
			transitionConstraintItemProvider = new TransitionConstraintItemProvider(this);
		}

		return transitionConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.Guard} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GuardItemProvider guardItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.Guard}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGuardAdapter() {
		if (guardItemProvider == null) {
			guardItemProvider = new GuardItemProvider(this);
		}

		return guardItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.Relation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationItemProvider relationItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.Relation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationAdapter() {
		if (relationItemProvider == null) {
			relationItemProvider = new RelationItemProvider(this);
		}

		return relationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.StoryPatternNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StoryPatternNodeItemProvider storyPatternNodeItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.StoryPatternNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStoryPatternNodeAdapter() {
		if (storyPatternNodeItemProvider == null) {
			storyPatternNodeItemProvider = new StoryPatternNodeItemProvider(this);
		}

		return storyPatternNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.RoleModelNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoleModelNodeItemProvider roleModelNodeItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.RoleModelNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoleModelNodeAdapter() {
		if (roleModelNodeItemProvider == null) {
			roleModelNodeItemProvider = new RoleModelNodeItemProvider(this);
		}

		return roleModelNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.NaturalNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NaturalNodeItemProvider naturalNodeItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.NaturalNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNaturalNodeAdapter() {
		if (naturalNodeItemProvider == null) {
			naturalNodeItemProvider = new NaturalNodeItemProvider(this);
		}

		return naturalNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.SuccessNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SuccessNodeItemProvider successNodeItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.SuccessNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSuccessNodeAdapter() {
		if (successNodeItemProvider == null) {
			successNodeItemProvider = new SuccessNodeItemProvider(this);
		}

		return successNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.FailNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FailNodeItemProvider failNodeItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.FailNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFailNodeAdapter() {
		if (failNodeItemProvider == null) {
			failNodeItemProvider = new FailNodeItemProvider(this);
		}

		return failNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.ForkNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForkNodeItemProvider forkNodeItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.ForkNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForkNodeAdapter() {
		if (forkNodeItemProvider == null) {
			forkNodeItemProvider = new ForkNodeItemProvider(this);
		}

		return forkNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.JoinNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JoinNodeItemProvider joinNodeItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.JoinNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJoinNodeAdapter() {
		if (joinNodeItemProvider == null) {
			joinNodeItemProvider = new JoinNodeItemProvider(this);
		}

		return joinNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.StartNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StartNodeItemProvider startNodeItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.StartNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStartNodeAdapter() {
		if (startNodeItemProvider == null) {
			startNodeItemProvider = new StartNodeItemProvider(this);
		}

		return startNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.EndNote} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EndNoteItemProvider endNoteItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.EndNote}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEndNoteAdapter() {
		if (endNoteItemProvider == null) {
			endNoteItemProvider = new EndNoteItemProvider(this);
		}

		return endNoteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.SinkNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SinkNodeItemProvider sinkNodeItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.SinkNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSinkNodeAdapter() {
		if (sinkNodeItemProvider == null) {
			sinkNodeItemProvider = new SinkNodeItemProvider(this);
		}

		return sinkNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.PlayRoleNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlayRoleNodeItemProvider playRoleNodeItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.PlayRoleNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlayRoleNodeAdapter() {
		if (playRoleNodeItemProvider == null) {
			playRoleNodeItemProvider = new PlayRoleNodeItemProvider(this);
		}

		return playRoleNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.AddRoleNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddRoleNodeItemProvider addRoleNodeItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.AddRoleNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddRoleNodeAdapter() {
		if (addRoleNodeItemProvider == null) {
			addRoleNodeItemProvider = new AddRoleNodeItemProvider(this);
		}

		return addRoleNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.RemoveRoleNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RemoveRoleNodeItemProvider removeRoleNodeItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.RemoveRoleNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRemoveRoleNodeAdapter() {
		if (removeRoleNodeItemProvider == null) {
			removeRoleNodeItemProvider = new RemoveRoleNodeItemProvider(this);
		}

		return removeRoleNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.RenewRoleNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RenewRoleNodeItemProvider renewRoleNodeItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.RenewRoleNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRenewRoleNodeAdapter() {
		if (renewRoleNodeItemProvider == null) {
			renewRoleNodeItemProvider = new RenewRoleNodeItemProvider(this);
		}

		return renewRoleNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.ProhibitedRoleNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProhibitedRoleNodeItemProvider prohibitedRoleNodeItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.ProhibitedRoleNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProhibitedRoleNodeAdapter() {
		if (prohibitedRoleNodeItemProvider == null) {
			prohibitedRoleNodeItemProvider = new ProhibitedRoleNodeItemProvider(this);
		}

		return prohibitedRoleNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.GenericEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenericEventItemProvider genericEventItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.GenericEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenericEventAdapter() {
		if (genericEventItemProvider == null) {
			genericEventItemProvider = new GenericEventItemProvider(this);
		}

		return genericEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.Context} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContextItemProvider contextItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.Context}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContextAdapter() {
		if (contextItemProvider == null) {
			contextItemProvider = new ContextItemProvider(this);
		}

		return contextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.Compartment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompartmentItemProvider compartmentItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.Compartment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompartmentAdapter() {
		if (compartmentItemProvider == null) {
			compartmentItemProvider = new CompartmentItemProvider(this);
		}

		return compartmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.JoinSpec} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JoinSpecItemProvider joinSpecItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.JoinSpec}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJoinSpecAdapter() {
		if (joinSpecItemProvider == null) {
			joinSpecItemProvider = new JoinSpecItemProvider(this);
		}

		return joinSpecItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (edgeItemProvider != null) edgeItemProvider.dispose();
		if (roleStoryBoardItemProvider != null) roleStoryBoardItemProvider.dispose();
		if (transitionConstraintItemProvider != null) transitionConstraintItemProvider.dispose();
		if (guardItemProvider != null) guardItemProvider.dispose();
		if (relationItemProvider != null) relationItemProvider.dispose();
		if (storyPatternNodeItemProvider != null) storyPatternNodeItemProvider.dispose();
		if (roleModelNodeItemProvider != null) roleModelNodeItemProvider.dispose();
		if (naturalNodeItemProvider != null) naturalNodeItemProvider.dispose();
		if (successNodeItemProvider != null) successNodeItemProvider.dispose();
		if (failNodeItemProvider != null) failNodeItemProvider.dispose();
		if (forkNodeItemProvider != null) forkNodeItemProvider.dispose();
		if (joinNodeItemProvider != null) joinNodeItemProvider.dispose();
		if (startNodeItemProvider != null) startNodeItemProvider.dispose();
		if (endNoteItemProvider != null) endNoteItemProvider.dispose();
		if (sinkNodeItemProvider != null) sinkNodeItemProvider.dispose();
		if (playRoleNodeItemProvider != null) playRoleNodeItemProvider.dispose();
		if (addRoleNodeItemProvider != null) addRoleNodeItemProvider.dispose();
		if (removeRoleNodeItemProvider != null) removeRoleNodeItemProvider.dispose();
		if (renewRoleNodeItemProvider != null) renewRoleNodeItemProvider.dispose();
		if (prohibitedRoleNodeItemProvider != null) prohibitedRoleNodeItemProvider.dispose();
		if (genericEventItemProvider != null) genericEventItemProvider.dispose();
		if (contextItemProvider != null) contextItemProvider.dispose();
		if (compartmentItemProvider != null) compartmentItemProvider.dispose();
		if (joinSpecItemProvider != null) joinSpecItemProvider.dispose();
	}

}
